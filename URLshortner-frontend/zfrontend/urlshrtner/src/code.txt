"use client"

import { useState } from "react"

export default function App() {
  // State for URL shortening
  const [longUrl, setLongUrl] = useState("")
  const [shortUrl, setShortUrl] = useState("")
  const [isShortening, setIsShortening] = useState(false)
  const [shortenError, setShortenError] = useState("")

  // State for analytics
  const [shortId, setShortId] = useState("")
  const [analytics, setAnalytics] = useState(null)
  const [isLoadingAnalytics, setIsLoadingAnalytics] = useState(false)
  const [analyticsError, setAnalyticsError] = useState("")

  // Function to shorten URL
  const handleShortenUrl = async () => {
    if (!longUrl.trim()) {
      setShortenError("Please enter a valid URL")
      return
    }

    setIsShortening(true)
    setShortenError("")

    try {
      const response = await fetch("/api/shorten", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ redirectUrl: longUrl }),
      })

      if (!response.ok) {
        throw new Error("Failed to shorten URL")
      }

      const data = await response.json()
      const generatedShortUrl = `https://yourdomain.com/url/${data.shortId}`
      setShortUrl(generatedShortUrl)
    } catch (error) {
      setShortenError("Error shortening URL. Please try again.")
      console.error("Error:", error)
    } finally {
      setIsShortening(false)
    }
  }

  // Function to get analytics
  const handleGetAnalytics = async () => {
    if (!shortId.trim()) {
      setAnalyticsError("Please enter a valid short ID")
      return
    }

    setIsLoadingAnalytics(true)
    setAnalyticsError("")

    try {
      const response = await fetch(`/api/analytics/${shortId}`)

      if (!response.ok) {
        throw new Error("Failed to fetch analytics")
      }

      const data = await response.json()
      setAnalytics(data)
    } catch (error) {
      setAnalyticsError("Error fetching analytics. Please check the short ID.")
      console.error("Error:", error)
    } finally {
      setIsLoadingAnalytics(false)
    }
  }

  // Function to copy short URL to clipboard
  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(shortUrl)
      // You could add a toast notification here
    } catch (error) {
      console.error("Failed to copy:", error)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-2xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">URL Shortener</h1>
          <p className="text-lg text-gray-600">Shorten your URLs and track their analytics</p>
        </div>

        {/* URL Shortening Section */}
        <div className="bg-white rounded-lg shadow-md p-8 mb-8">
          <h2 className="text-2xl font-semibold text-gray-800 mb-6">Shorten URL</h2>

          <div className="space-y-4">
            <div>
              <label htmlFor="longUrl" className="block text-sm font-medium text-gray-700 mb-2">
                Enter your long URL
              </label>
              <input
                id="longUrl"
                type="url"
                value={longUrl}
                onChange={(e) => setLongUrl(e.target.value)}
                placeholder="https://example.com/very/long/url"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-colors"
              />
            </div>

            {shortenError && <div className="text-red-600 text-sm">{shortenError}</div>}

            <button
              onClick={handleShortenUrl}
              disabled={isShortening}
              className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200"
            >
              {isShortening ? "Shortening..." : "Shorten URL"}
            </button>

            {shortUrl && (
              <div className="mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">
                <label className="block text-sm font-medium text-green-800 mb-2">Your shortened URL:</label>
                <div className="flex items-center space-x-2">
                  <input
                    type="text"
                    value={shortUrl}
                    readOnly
                    className="flex-1 px-3 py-2 bg-white border border-green-300 rounded-md text-green-800 focus:outline-none"
                  />
                  <button
                    onClick={copyToClipboard}
                    className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-md transition-colors"
                  >
                    Copy
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Analytics Section */}
        <div className="bg-white rounded-lg shadow-md p-8">
          <h2 className="text-2xl font-semibold text-gray-800 mb-6">Get Analytics</h2>

          <div className="space-y-4">
            <div>
              <label htmlFor="shortId" className="block text-sm font-medium text-gray-700 mb-2">
                Enter short ID
              </label>
              <input
                id="shortId"
                type="text"
                value={shortId}
                onChange={(e) => setShortId(e.target.value)}
                placeholder="abc123"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent outline-none transition-colors"
              />
            </div>

            {analyticsError && <div className="text-red-600 text-sm">{analyticsError}</div>}

            <button
              onClick={handleGetAnalytics}
              disabled={isLoadingAnalytics}
              className="w-full bg-purple-600 hover:bg-purple-700 disabled:bg-purple-400 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200"
            >
              {isLoadingAnalytics ? "Loading Analytics..." : "Get Analytics"}
            </button>

            {analytics && (
              <div className="mt-6 p-6 bg-purple-50 border border-purple-200 rounded-lg">
                <h3 className="text-lg font-semibold text-purple-800 mb-4">Analytics Results</h3>

                <div className="mb-4">
                  <span className="text-sm font-medium text-purple-700">Total Clicks:</span>
                  <span className="ml-2 text-2xl font-bold text-purple-900">{analytics.totalClicks}</span>
                </div>

                {analytics.timestamps && analytics.timestamps.length > 0 && (
                  <div>
                    <h4 className="text-sm font-medium text-purple-700 mb-3">Click History:</h4>
                    <div className="max-h-40 overflow-y-auto space-y-2">
                      {analytics.timestamps.map((timestamp, index) => (
                        <div key={index} className="text-sm text-purple-600 bg-white px-3 py-2 rounded border">
                          {new Date(timestamp).toLocaleString()}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
